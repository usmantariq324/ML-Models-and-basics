from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import RobustScaler
from sklearn.model_selection import train_test_split
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
clf=LogisticRegression()
Scaler=RobustScaler()
var1=pd.read_csv('logistic_regression_data_1500_encoded_unique.csv')
x=var1.iloc[:,0:2]
y=var1.iloc[:,-1]
X_train,x_test,Y_train,y_test=train_test_split(x,y,test_size=0.1)

clf.fit(X_train,Y_train)
X_Train_scaled=Scaler.fit_transform(X_train)
x_test=Scaler.transform(x_test)
fig=plt.figure(figsize=(10,7))

ax= fig.add_subplot(111,projection="3d")
ax.scatter(X_train.iloc[:,0],X_train.iloc[:,1],X_train.iloc[:,2],c=Y_train,cmap=plt.cm.coolwarm,alpha=0.7)
xx,yy=np.meshgrid(
    np.linspace(X_train.iloc[:,0].min(),X_train.iloc[:,0].max(),30),
    np.linspace(X_train.iloc[:,1].min(),X_train.iloc[:,1].max(),30),
)
coef=clf.coef_[0]
intercept=clf.intercept_[0]
zz= (-coef[0]*xx-coef[1]*yy-intercept/coef[2])
ax.plot_surface(xx,yy,zz,alpha=0.3,color="green")
ax.set_xlabel("Age")
ax.set_ylabel("income")
plt.title("3D logistic regression model")
plt.show()
predicted=clf.predict(x_test)
accuracy=accuracy_score(y_test,predicted)
print(accuracy)
age=int(input("Enter Your Age:"))
Income=int(input("Enter Your Income per month:"))
new_data=np.array([[age,Income]])
scaled_data =Scaler.transform(new_data)
predicted_new=clf.predict(scaled_data)
if predicted_new[0]==1:
    print("This person can buy our product.")
else:
    print("This person cannot buy our product.")








































































































































































































































































































































































































































































